cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)){
message ("cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
inv
}
cacheSolve()
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(solveMatrix) inv <<- solveMatrix
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
makeCacheMatrix()
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)){
message ("cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
inv
}
cacheSolve()
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)){
message ("cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
inv x
}
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y){
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(solveMatrix) inv <<- solveMatrix
getInverse <- function() inv
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)){
message ("cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
inv
}
makeCacheMatrix()
cacheSolve(x)
cacheSolve()
https://github.com/rdpeng/ProgrammingAssignment2
github.com/rdpeng/ProgrammingAssignment2
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)){
message ("cached data")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setInverse(inv)
x
}
cacheSolve()
